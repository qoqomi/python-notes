"""
====================================
# 과제명: 실행 시간 측정 데코레이터 구현
# 작성자: [유승연] / [2077]
# 작성일: 2025-09-17
# 설명:
  measure_time이라는 이름의 데코레이터 함수를 작성
  • 이 데코레이터는 어떤 함수든 wrapping 후 실행 시간을 측정한 뒤,
    ‣ 함수 실행 결과는 그대로 반환하고
    ‣ 실행 시간은 "함수명 took 0.1234 seconds"와 같이 출력
  • 임의의 연산 지연이 있는 함수 slow_function()에 적용하여 정상 동작을 확인
====================================
"""

import time


# -------------------------------------------------------------------
# 실행 시간 측정 데코레이터
# - 함수 실행 전/후 시간을 기록하여 소요 시간을 출력
# - 실행 결과는 그대로 반환
# -------------------------------------------------------------------
def measure_time(func):
    """함수 실행 시간을 측정하고 콘솔에 출력하는 데코레이터"""

    def wrapper(*args, **kwargs):
        start = time.time()  # 시작 시각 기록
        result = func(*args, **kwargs)  # 원래 함수 실행
        end = time.time()  # 종료 시각 기록
        elapsed = end - start
        print(f"[실행 시간] {func.__name__}: {elapsed:.3f}초")
        return result

    return wrapper


# -------------------------------------------------------------------
# 테스트용 함수
# - 1.5초 동안 지연 후 "완료!" 문자열 반환
# -------------------------------------------------------------------
@measure_time
def slow_function():
    """1.5초 대기 후 '완료!' 반환"""
    time.sleep(1.5)
    return "완료!"


# -------------------------------------------------------------------
# 실행 진입점
# -------------------------------------------------------------------
def main():
    result = slow_function()
    print("함수 결과:", result)


if __name__ == "__main__":
    main()
